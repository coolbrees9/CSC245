Script started on Tue 02 May 2017 02:58:48 PM EDT
]0;oneal_c@cobra:~/CSC245/Prog4[?1034hCobra> cat dijkstra,[K.cpp
#include "queue.h"
#include <string>
#include <iostream>
#include <fstream>
#include <sstream>
#include "graph.h"
#include <cstdlib>
#include <sstream>
#include <vector>
#include <climits>
#include <iomanip>
#include <stack>
#include <set>

using namespace std;

#include "SeparateChaining.h"


struct VertexType
{
	string name;
	bool marked;
	int distance;
	string previous;	
};

void insertionSort(string cities[], int numVertices);
void checkInFile(int argc);
void buildDGraph(Graph<string> &dGraph, string filename, string cities[], int &numVertices, int &numEdges, VertexType myVertices[]);
string printCities(Graph<string> dGraph, int numVertices, VertexType myVertices[], string cities[]);
string setStart(string start, int numVertices, VertexType myVertices[]);
void printRow(int& location, VertexType myVertices[]);
int findMin(VertexType myVertices[], int numVertices);
void dijkstra(Graph<string> &dGraph, int numVertices, VertexType myVertices[], string& start, int& location, int& startingLocation);
bool allMarked(int numVertices, VertexType myVertices[]);
void assignWeights(Graph<string> &dGraph, int numVertices, VertexType myVertices[], int& startingLocation, Queue<string>& getTo, string& start, int& location);
int indexIs(VertexType myVertices[], int numVertices, int& location);

int main(int argc, char* argv[])
{
	checkInFile(argc);	// Checks to see if Filename is given

	// Creation of Input File:
	string filename = argv[1];

	Graph<string> dGraph; 
	int numVertices;
	int numEdges;
	int location = -1;
	int startingLocation = -1;
	VertexType myVertices [50];
	string cities [50];
	buildDGraph(dGraph, filename, cities, numVertices, numEdges, myVertices);	// Builds the Graph using the data from the external file.
	string start = printCities(dGraph, numVertices, myVertices, cities);	// Prints Cities found in file
	dijkstra(dGraph, numVertices, myVertices, start, location, startingLocation);	// Computes Dijkstra's Algorithm:
}

// Checks to see if Filename is given:
void checkInFile(int argc)
{
	if(argc <= 1)
	{
		printf("No filename entered\n");
		exit(1);
	}
}

// Computes Dijkstra's Algorithm:
void dijkstra(Graph<string> &dGraph, int numVertices, VertexType myVertices[], string& start, int& location, int& startingLocation)
{
	Queue<string> getTo;
	string prev, name;
	printf("\n------------------------------------------------------------\n\n");	
	cout << setw(14) << "Vertex" << setw(18) << "Distance" << setw(16) << "Previous\n\n";
	for(int i = 0; i < numVertices; i++)
	{
		if(myVertices[i].name.compare(start) == 0)
		{
			myVertices[i].previous = "N/A";
                	myVertices[i].distance = 0;
                        myVertices[i].marked = true;
			printRow(i, myVertices);
                        location = i;
                        startingLocation = i;
                }
	}
	//When all vertices are not marked will print rows in summary table
	while(!allMarked(numVertices, myVertices))
	{
		assignWeights(dGraph, numVertices, myVertices, startingLocation, getTo, start, location);
		printRow(startingLocation, myVertices);
	}
	printf("\n-------------------------------------------------------------\n\n");
}

// Assign weights based on the starting location
void assignWeights(Graph<string> &dGraph, int numVertices, VertexType myVertices[], int& startingLocation, Queue<string>& getTo, string& start, int& location)
{
		string prev, name;
		dGraph.GetToVertices(myVertices[startingLocation].name, getTo);
		//When the queue isn't empty it will check where the next city is and set variable equal to that index
		//edge is set equal to the total distance from start to next location
		while(!getTo.isEmpty())
		{
			prev = myVertices[startingLocation].name;
			name = getTo.getFront();
			int total = myVertices[startingLocation].distance + dGraph.WeightIs(myVertices[startingLocation].name, name);
			for(int i = 0; i < numVertices; i++)
				if(myVertices[i].name == name)
					location = i;
			if(myVertices[location].marked != true && (myVertices[location].distance > total))
			{
				myVertices[location].previous = prev;
				myVertices[location].distance = total;
			}
			getTo.dequeue();
		}
		startingLocation = findMin(myVertices, numVertices);
		myVertices[startingLocation].marked = true;
}

// Checks to see if all Vertices have been marked:
bool allMarked(int numVertices, VertexType myVertices[])
{
	bool mark = false;
	for(int i = 0; i < numVertices; i++)
	{
		if(myVertices[i].marked != true)
		{
			return false;
		}
		else
			mark = true;
	}
	return mark;
}

// Builds the Graph using the data from the External File:
void buildDGraph(Graph<string> &dGraph, string filename, string cities[], int &numVertices, int &numEdges, VertexType myVertices[])
{
	const string NotFound = "ZZZ";
	string city1, city2;
	int weight;
	ifstream infile;
	infile.open(filename.c_str());
	HashTable<string> Cities(NotFound, 50);
	int i = 0;
	getline(infile, city1, ';');
	getline(infile, city2, ';');
	infile >> weight;
	infile.ignore(80, '\n');
	myVertices[i].distance = INT_MAX;
	while(infile)
	{
		if((Cities.find(city1) != city1))
		{
			dGraph.AddVertex(city1);
			Cities.insert(city1);
			cities[i] = city1;
			numVertices++;
			myVertices[i].name = city1;
			myVertices[i].marked = false;
			myVertices[i].distance = INT_MAX;
			i++;
		}
		if((Cities.find(city2) != city2))
		{
			dGraph.AddVertex(city2);
			Cities.insert(city2);
			cities[i] = city2;
			numVertices++;
			myVertices[i].name = city2;
			myVertices[i].marked = false;
			myVertices[i].distance = INT_MAX;
			i++;
		}
		dGraph.AddEdge(city1, city2, weight);
		numEdges++;

		getline(infile, city1, ';');
        	getline(infile, city2, ';');
        	infile >> weight;
        	infile.ignore(80, '\n');
	}
	infile.close();
}

// Prints Cities found in External File:
string printCities(Graph<string> dGraph, int numVertices, VertexType myVertices[], string cities[])
{
	int i = 0;
	string start;
	insertionSort(cities, numVertices);
	cout << "\033[2J\033[1;1H";
	printf("\t\t\t^^^^^^^^^^^^^^^^     Dijkstra's Algorithm     ^^^^^^^^^^^^^^^^\n\n");
	printf("A weighted Graph Has Been Built For These %d Cities :\n\n", numVertices);
	while(i < numVertices)
	{
		cout << "\t" << cities[i] << "\t";
		if((i+1) % 3 == 0)
			cout << endl;
		i++;
	}
	printf("\n\n");
	return setStart(start, numVertices, myVertices);
}

// Sorts the Cities Alphabetically:
void insertionSort(string cities[], int numVertices)
{
	int i, j;
	for(i = 0; i < numVertices; i++)
	{
	        string tmp = cities[ i ];
		for( j = i; j > 0 && tmp < cities[ j - 1 ]; j-- )
			cities[ j ] = cities[ j - 1 ];
		cities[ j ] = tmp;
	}
}

//Sets the Starting Value in Dijsktra's Algorithm:
string setStart(string start, int numVertices, VertexType myVertices[])
{
	cout << " Please input your starting vertex: ";
	string response;
	getline(cin,response);
	bool isThere = false;
	for (int i = 0;	i < numVertices; i++)
	{
		if (myVertices[i].name.compare(response) == 0)
		{
			start = response;
			return start;
		}
	}
	while (!isThere)
	{
		cout << " Starting location does not exist..." << endl;
		cout << " Please input your new vertex: ";
        	string response;
        	cin >> response;
		for (int i = 0; i < numVertices; i++)
        	{
                	if (myVertices[i].name.compare(response) == 0)
			{
                        	start = response;
                        	return start;
                	}
        	}
	}
}

// Finds the minimum non-marked values in VertexType Array:
int findMin(VertexType myVertices[], int numVertices)
{
 		int minWeight = INT_MAX - 1;
                int minThing = -1;
		for (int i = 0; i < numVertices; i++)
                {
                        if (myVertices[i].distance < minWeight && !myVertices[i].marked)
                        {
                                minWeight = myVertices[i].distance;
                                minThing = i;
                        }
			else if (myVertices[i].distance == minWeight && !myVertices[i].marked)
        		{
                                minWeight = myVertices[i].distance;
                                minThing = i;
                        }
		}       
		return minThing;
}

// Prints a given row in a Summary Table:
void printRow(int& location, VertexType myVertices[])
{
	if (myVertices[location].distance != -1)
	cout << setw(14) << myVertices[location].name << setw(18) << myVertices[location].distance << setw(16) << myVertices[location].previous << endl;
	else
	 cout << setw(14) << myVertices[location].name << setw(18) << "Not On Path" << setw(16) << myVertices[location].previous << endl;
}

int indexIs(VertexType myVertices[], int numVertices, int& location)
{
	int index = 0;
	while (! (myVertices[location].name == myVertices[index].name))
		index++;
	return index;
}
]0;oneal_c@cobra:~/CSC245/Prog4Cobra> c++ dijkstra.cpp
]0;oneal_c@cobra:~/CSC245/Prog4Cobra> a.out ginfile1.dat
[2J[1;1H			^^^^^^^^^^^^^^^^     Dijkstra's Algorithm     ^^^^^^^^^^^^^^^^

A weighted Graph Has Been Built For These 7 Cities :

	Atlanta		Austin		Chicago	
	Dallas		Denver		Houston	
	Washington	

 Please input your starting vertex: Washington

------------------------------------------------------------

        Vertex          Distance      Previous

    Washington                 0             N/A
       Atlanta               600      Washington
        Dallas              1300      Washington
       Houston              1400         Atlanta
        Austin              1500          Dallas
        Denver              2080          Dallas
       Chicago              2200          Dallas

-------------------------------------------------------------

]0;oneal_c@cobra:~/CSC245/Prog4Cobra> a.out ginfile1.dat
[2J[1;1H			^^^^^^^^^^^^^^^^     Dijkstra's Algorithm     ^^^^^^^^^^^^^^^^

A weighted Graph Has Been Built For These 7 Cities :

	Atlanta		Austin		Chicago	
	Dallas		Denver		Houston	
	Washington	

 Please input your starting vertex: Atlanta

------------------------------------------------------------

        Vertex          Distance      Previous

       Atlanta                 0             N/A
    Washington               600         Atlanta
       Houston               800         Atlanta
        Dallas              1900      Washington
        Austin              2100          Dallas
        Denver              2680          Dallas
       Chicago              2800          Dallas

-------------------------------------------------------------

]0;oneal_c@cobra:~/CSC245/Prog4Cobra> exit
exit

Script done on Tue 02 May 2017 02:59:37 PM EDT
