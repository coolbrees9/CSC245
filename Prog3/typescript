Script started on Sat 08 Apr 2017 02:44:07 PM EDT
]0;oneal_c@cobra:~/CSC245/Prog3[?1034hCobra> -n[K[Kcat -n zip.cpp
     1	//Colin ONeal
     2	//zip.cpp
     3	#include <cctype>
     4	#include <stdio.h>
     5	#include <fstream>
     6	#include <string>
     7	#include <iostream>
     8	#include <cstdlib>
     9	#include "huffman.h"
    10	
    11	using namespace std;
    12	void Frequency(ifstream& infile, int Letters[], int argc, char *argv[], int source, string& S);
    13	void PrintLetters (const int Letters[], HuffmanTree& htree, int header);
    14	void Compress(ifstream& infile, int argc, char *argv[], int Letters[256], HuffmanTree& htree, int source, string& S, int header);
    15	int main(int argc, char *argv[])
    16	{
    17		string S;
    18		int source = 0;
    19		int header = 0;
    20		int Letters[256];
    21		string input;
    22		if(argc > 1)
    23			input = argv[1];
    24		HuffmanTree htree;
    25	        ifstream infile;
    26		if(argc <= 1)
    27		{
    28			cout << "Error!! No File Entered." << endl;
    29			exit(1);
    30		}
    31		else if(input.compare("--help") == 0)
    32		{
    33			infile.open("help");
    34			string in;
    35			while(!infile.eof())
    36			{
    37				getline(infile, in);
    38				cout << in << endl;
    39			}
    40			exit(1);
    41		}
    42		else
    43		{
    44			Frequency(infile, Letters, argc, argv, source, S);
    45			PrintLetters(Letters, htree, header);
    46			htree.build();
    47	        	Compress(infile, argc, argv, Letters, htree, source, S, header);
    48		}
    49	
    50	        return 0;
    51	}
    52	//Opens the file entered after the a.out and compresses it 
    53	void Compress(ifstream& infile, int argc, char *argv[], int Letters[256], HuffmanTree& htree, int source, string& S, int header)
    54	{
    55		int compressed = 0;
    56		float ratio;
    57		int i, j;
    58		string input = argv[1];
    59		string filename;
    60		if(argc > 2)
    61			filename = argv[2];
    62		else
    63			filename = argv[1];
    64		infile.open(filename.c_str());
    65		//Checks if file entered is valid or not
    66		if(infile.fail())
    67		{
    68			cout << "Must enter a filename" << endl;
    69			exit(1);
    70		}
    71		else
    72		{
    73			header = htree.numNodes() - (htree.numNodes()/2);
    74			//Adds .zip to the file
    75			filename+=".zip";
    76			ofstream outfile;
    77	                outfile.open(filename.c_str());
    78			outfile << header << endl;
    79			//Loop to compress each char
    80			for (char ch = char(0);  ch <= char(126);  ch++)
    81			{
    82		  		if ( (Letters[ch] != 0) && (ch != '\n') && (ch != ' ') )
    83				{
    84		    			outfile << (int)ch << " " << htree.GetCode(ch) << endl;
    85					source++;
    86				}
    87		  		else if ( (Letters[ch] != 0) && (ch == '\n') )
    88				{
    89		    			outfile << (int)ch << " "<< htree.GetCode('^') << endl;
    90					source++;
    91				}
    92		  		else if ( (Letters[ch] != 0) && (ch == ' ') )
    93				{
    94		    			outfile << (int)ch << " " << htree.GetCode('$') << endl;
    95					source++;
    96				}
    97			}
    98			//Prints Encoding table if --t is entered
    99			if(input.compare("--t") == 0 && argc > 2)
   100	        	{
   101	        		htree.PrintTable();
   102	        	}
   103			char code;
   104			for(int i = 0; i < S.length(); i++)
   105			{
   106				code = S[i];
   107				outfile << htree.GetCode(code);
   108				compressed++;
   109			}
   110			outfile << endl;
   111			outfile.close();
   112			ratio = (1 -(float)(compressed/((float)source*8))) * 100;
   113			cout << "File Successfully Compressed to " << compressed << " Bits (" << ratio << "% Less)" << endl;
   114		}
   115	}
   116	//Method to count weight
   117	void Frequency (ifstream& infile, int Letters[], int argc, char* argv[], int source, string& S)
   118	{
   119		string filename;
   120		char ch;
   121		if(argc > 2)
   122			filename = argv[2];
   123		else
   124			filename = argv[1];
   125		infile.open(filename.c_str());
   126		for (char ch = char(0);  ch <= char(126);  ch++)
   127			Letters[ch] = 0;
   128	
   129		infile.get(ch);
   130		while (infile)
   131		{
   132			Letters[ch] += 1;
   133			S+=ch;
   134			infile.get(ch);
   135		}
   136		infile.close();
   137	}
   138	//Method to insert chars into tree
   139	void PrintLetters (const int Letters[], HuffmanTree& htree, int header)
   140	{
   141		for (char ch = char(0);  ch <= char(126);  ch++)
   142		  	if ( (Letters[ch] != 0) && (ch != '\n') && (ch != ' ') )
   143			{
   144		    		htree.insert(ch, Letters[ch]);
   145				header++;
   146			}
   147			else if ( (Letters[ch] != 0) && (ch == '\n') )
   148			{
   149		    		htree.insert('^', Letters[ch]);
   150				header++;
   151			}
   152		  	else if ( (Letters[ch] != 0) && (ch == ' ') )
   153			{
   154		    		htree.insert('$', Letters[ch]);
   155				header++;
   156			}
   157	}
]0;oneal_c@cobra:~/CSC245/Prog3Cobra> cat huffman.h
#include <vector>
#include <string>
using namespace std;

struct HNode {
    char ch;
    int weight;
    int parent;
    int childType;
};

class HuffmanTree {
    public:
	HuffmanTree();				// constructor

	void insert(char ch, int weight);	// inserts a character and its associated weight
						// into a node of the Huffman tree

	bool inTree(char ch);			// returns a boolean value indicating whether
						// a given character is stored in the tree
		
	int GetFrequency(char ch);		// returns the weight of a given character

	
	void build();				// Builds the Huffman Tree;
	

	string GetCode(char ch);		// returns the compressed code of a given
						// character in the tree using recursion

	void PrintTable();			// displays the Huffman encoding table used in
						// the compression process
	
	int numNodes();				// returns the number of nodes currently in Huffman 
						// tree

    private:
	vector<HNode> nodes;
	int numChars;
	bool built;                             
	
	int lookUp(char ch);			// returns the index of a given character in tree
	int GetFrequency(int i);		// returns the weight at a given index
	string GetCode(int i);			// returns the compressed code of the character at 
						// a given index
};
]0;oneal_c@cobra:~/CSC245/Prog3Cobra> cat huffman.cpp
using namespace std;
#include "huffman.h"
#include <cctype>
#include <stdio.h>
#include <iostream>
#include <vector>
#include <string>
#include <cstdlib>
#include <climits>

HuffmanTree:: HuffmanTree()
	: numChars(0), built(false) {}
//Inserts characters in the tree
void HuffmanTree:: insert(char ch, int weight) {
    HNode newNode = {ch, weight, 0, -1}; 
    built = false;
    nodes.push_back(newNode);
    numChars++;

}
//Checks if the value entered is in tree
bool HuffmanTree:: inTree(char ch) {
	return ch == lookUp(ch);

}
//public to get frequency of the character
int HuffmanTree:: GetFrequency(char ch) {
	return GetFrequency(ch);
}
//private and gets frequency of character
int HuffmanTree:: GetFrequency(int i) {
	char ch;
	int Letters[i];
	for (ch = char(0);  ch <= char(126);  ch++)
                Letters[ch] = 0;

        cin.get(ch);
        while (cin)
        {
                Letters[ch] += 1;
                cin.get(ch);
        }
	return ch;
}
//Returns index of where character is at
int HuffmanTree:: lookUp(char ch) {
	int pos = 0;
	while(pos < numChars)
	{
		if(nodes[pos].ch == ch)
			return pos;
		pos++;
	}
	return -1;
}
//public and returns compressed code of character
string HuffmanTree:: GetCode(char ch) {
	return GetCode(lookUp(ch));
}
//private and returns compressed code of character
string HuffmanTree:: GetCode(int i) {
	if (nodes[i].parent == 0)
          return "";
        else
          return (GetCode(nodes[i].parent) + (char)(nodes[i].childType+'0'));
}
//Prints the Encoding Table
void HuffmanTree:: PrintTable() {
	int a = 1;
	printf("\t++++  Encoding Table  ++++\n\n");
	printf("Index\tChar\tWeight\tParent\tChildType\n");
	for(int i = 0; i < numChars; i++)
          if (nodes[i].ch != ' ' && nodes[i].ch != '\0')
            cout << i <<"\t" << nodes[i].ch <<"\t" << nodes[i].weight <<"\t" << nodes[i].parent <<"\t" << nodes[i].childType << endl;
	  else if(nodes[i].ch == '\0' && nodes[i].childType != -1)
	  {
	    cout << i <<"\t" << 'T' <<a<<"\t" << nodes[i].weight <<"\t" << nodes[i].parent <<"\t" << nodes[i].childType << endl;
	    a++;
	  }
	  else
	  {
	    cout << i <<"\t" << 'T' <<a<<"\t" << nodes[i].weight <<"\t" << "0" <<"\t" << "-1" << endl;
	  }
}
//Returns the number of nodes in tree
int HuffmanTree:: numNodes(){
	return numChars;
}
//Build the huffman tree
void HuffmanTree:: build() {
	int max = (numChars*2) - 1;
	while(max > numChars)
	{
		int smallest;
		int min1;
		smallest = INT_MAX;
		for(int i = 0; i < numChars; i++)
		{
			if(nodes[i].parent == 0 && nodes[i].weight < smallest)
			{
				min1 = i;
				smallest = nodes[i].weight;
			}
		}
		int min2;
		smallest = INT_MAX;
		for(int j = 0; j < numChars; j++)
		{
			if((nodes[j].parent == 0) && (nodes[j].weight < smallest) && (j != min1))
			{
				min2 = j;
				smallest = nodes[j].weight;
			}
		}
		HNode temp = {'\0',(nodes[min1].weight + nodes[min2].weight),0,-1};
		nodes.push_back(temp);
		nodes[min1].parent = nodes.size() - 1;
		nodes[min1].childType = 0;
		nodes[min2].parent = nodes.size() - 1;
		nodes[min2].childType = 1;
		numChars++;
	}
	nodes[nodes.size() - 1].parent = 0;
	built = true;
}
]0;oneal_c@cobra:~/CSC245/Prog3Cobra> 
]0;oneal_c@cobra:~/CSC245/Prog3Cobra> c++ zip.cpp huffman.o
]0;oneal_c@cobra:~/CSC245/Prog3Cobra> mv a.out myZip
]0;oneal_c@cobra:~/CSC245/Prog3Cobra> c++ unzip.cpp
]0;oneal_c@cobra:~/CSC245/Prog3Cobra> mv a.out myUnzip
]0;oneal_c@cobra:~/CSC245/Prog3Cobra> cat test
aaabbbbccccccoooooooooooooo
]0;oneal_c@cobra:~/CSC245/Prog3Cobra> myZip --t test
	++++  Encoding Table  ++++

Index	Char	Weight	Parent	ChildType
0	^	1	5	0
1	a	3	5	1
2	b	4	6	0
3	c	6	7	0
4	o	14	8	0
5	T1	4	6	1
6	T2	8	7	1
7	T3	14	8	1
8	T4	28	0	-1
File Successfully Compressed to 28 Bits (30% Less)
]0;oneal_c@cobra:~/CSC245/Prog3Cobra> cat test.zip
5
10 1110
97 1111
98 110
99 10
111 0
111111111111110110110110101010101010000000000000000
]0;oneal_c@cobra:~/CSC245/Prog3Cobra> myUnzip test.zip
File Successfully Inflated Back to Original.
]0;oneal_c@cobra:~/CSC245/Prog3Cobra> cat test
aaabbbbccccccooooooooooooooo]0;oneal_c@cobra:~/CSC245/Prog3Cobra> 
]0;oneal_c@cobra:~/CSC245/Prog3Cobra> exit
exit

Script done on Sat 08 Apr 2017 02:47:52 PM EDT
